import { NumberKey, StringKey, UnionFind } from "../src/unionfind";

import * as mocha from "mocha";
import * as chai from "chai";

const expect = chai.expect;

describe("Basic union find tests", () => {
  it("simple test", () => {
    const uf = new UnionFind(StringKey);
    expect(uf.find("a")).to.eql("a");
    expect(uf.find("b")).to.eql("b");
    uf.union("a", "b");
    expect(uf.find("a") == uf.find("b")).to.be.true;
  });
  it("transitive test", () => {
    const uf = new UnionFind(StringKey);
    expect(uf.find("a")).to.eql("a");
    expect(uf.find("b")).to.eql("b");
    expect(uf.find("c")).to.eql("c");
    uf.union("a", "b");
    expect(uf.find("a") == uf.find("b")).to.be.true;
    expect(uf.find("a") != uf.find("c")).to.be.true;
    expect(uf.find("b") != uf.find("c")).to.be.true;
    uf.union("b", "c");
    expect(uf.find("a") == uf.find("b")).to.be.true;
    expect(uf.find("a") == uf.find("c")).to.be.true;
    expect(uf.find("b") == uf.find("c")).to.be.true;
  });
  it("larger test", () => {
    const N = 200;
    const xs = [
      146, 21, 118, 40, 113, 58, 198, 128, 166, 104, 123, 169, 199, 88, 39, 51, 59, 73, 129, 112, 60, 85, 12, 80, 90, 37, 171, 49,
      38, 36, 159, 177, 155, 62, 115, 170, 70, 152, 87, 157, 117, 111, 100, 3, 64, 48, 20, 44, 29, 91, 35, 147, 42, 106, 163, 161,
      43, 194, 89, 83, 127, 102, 67, 116, 45, 50, 11, 0, 82, 7, 32, 47, 135, 65, 176, 158, 96, 126, 144, 10, 98, 18, 101, 17, 24,
      168, 153, 179, 124, 119, 41, 1, 136, 109, 145, 53, 108, 190, 25, 57, 84, 167, 178, 121, 154, 55, 151, 86, 138, 182, 97, 33,
      23, 148, 160, 196, 150, 4, 142, 133, 15, 66, 107, 175, 183, 143, 14, 61, 74, 93, 149, 78, 79, 54, 92, 197, 140, 156, 105, 189,
      131, 27, 172, 94, 191, 114, 137, 122, 16, 52, 174, 165, 95, 139, 195, 186, 63, 22, 75, 9, 5, 180, 69, 110, 77, 193, 99, 184,
      187, 19, 185, 56, 71, 164, 192, 162, 46, 132, 103, 34, 173, 72, 188, 130, 8, 141, 30, 181, 134, 76, 6, 13, 125, 28, 81, 31,
      26, 120, 2, 68,
    ];
    const ys = [
      129, 4, 168, 117, 32, 83, 19, 38, 131, 70, 3, 142, 102, 113, 148, 137, 46, 48, 68, 196, 146, 60, 27, 111, 124, 21, 108, 39,
      176, 191, 178, 42, 192, 161, 121, 71, 51, 24, 50, 91, 1, 141, 172, 72, 65, 185, 92, 58, 66, 22, 87, 2, 133, 78, 76, 85, 84,
      158, 105, 122, 98, 194, 15, 184, 101, 44, 20, 6, 31, 140, 26, 112, 73, 74, 64, 153, 14, 160, 100, 144, 154, 138, 174, 173, 53,
      30, 162, 59, 188, 157, 155, 47, 54, 94, 159, 134, 197, 198, 132, 183, 82, 163, 99, 169, 35, 33, 45, 62, 199, 69, 89, 126, 120,
      182, 167, 125, 18, 17, 136, 149, 145, 139, 88, 135, 7, 40, 34, 37, 170, 119, 43, 97, 115, 180, 13, 193, 12, 107, 186, 156,
      189, 190, 11, 75, 166, 110, 55, 90, 164, 77, 56, 128, 93, 187, 179, 147, 5, 29, 143, 151, 177, 41, 104, 8, 175, 118, 52, 95,
      96, 36, 61, 109, 123, 67, 195, 165, 127, 25, 9, 152, 106, 28, 57, 16, 63, 130, 10, 103, 0, 49, 114, 80, 150, 181, 81, 79, 86,
      171, 116, 23,
    ];
    const uf = new UnionFind(NumberKey);
    for (let i = 0; i < N; ++i) {
      uf.union(xs[i], ys[i]);
    }
    const idx: { [key: number]: number[] } = {};
    for (const x of xs) {
      const a = uf.find(x);
      if (!(a in idx)) {
        idx[a] = [];
      }
      idx[a].push(x);
    }
    expect(idx[25]).to.eql([25, 132]);
    expect(idx[81]).to.eql([81]);
    expect(idx[104]).to.eql([104, 39, 51, 49, 70, 163, 126, 167, 55, 182, 33, 148, 160, 137, 69, 76]);
    expect(idx[199]).to.eql([
      40, 128, 123, 199, 112, 38, 170, 117, 3, 64, 194, 102, 45, 47, 65, 176, 158, 18, 101, 153, 1, 109, 151, 138, 196, 150, 143,
      74, 94, 174, 165, 75, 9, 56, 71, 162, 103, 72, 181, 125, 28,
    ]);
  });
});
